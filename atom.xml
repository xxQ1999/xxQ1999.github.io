<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>まだまだだね</title>
  
  <subtitle>飞光飞光，劝你一杯酒</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://github.com/xxq1999/"/>
  <updated>2021-04-14T08:34:55.310Z</updated>
  <id>http://github.com/xxq1999/</id>
  
  <author>
    <name>xxQ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>边缘计算综述1</title>
    <link href="http://github.com/xxq1999/2021/04/13/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%E7%BB%BC%E8%BF%B01/"/>
    <id>http://github.com/xxq1999/2021/04/13/边缘计算综述1/</id>
    <published>2021-04-13T10:22:00.000Z</published>
    <updated>2021-04-14T08:34:55.310Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="总体介绍框架"><a href="#总体介绍框架" class="headerlink" title="总体介绍框架"></a>总体介绍框架</h4><ol><li><p>边缘计算</p><p>将计算任务在接近数据源的计算资源上运行，有效减少计算系统的延迟，减少数据传输带宽，环节云计算中心压力，提高可用性，并能够保护数据安全和隐私。</p></li><li><p>三个问题</p><ol><li>边缘计算从哪儿来？</li><li>现状</li><li>到哪儿去？</li></ol></li><li><p>发展历程</p><p>技术储备期、快速增长期、稳健发展期。</p></li><li><p>七项关键技术</p></li><li><p>六类典型应用</p></li><li><p>需要解决的六类问题</p></li></ol><h4 id="传统云计算中心缺点"><a href="#传统云计算中心缺点" class="headerlink" title="传统云计算中心缺点"></a>传统云计算中心缺点</h4><ol><li>实时性不够</li><li>带宽不足</li><li>能耗较大</li><li>不利于数据安全和隐私</li></ol><h4 id="边缘计算"><a href="#边缘计算" class="headerlink" title="边缘计算"></a>边缘计算</h4><ol><li><p>操作对象</p><p>云服务的下行数据、万物互联服务的上行数据</p></li><li><p>边缘指的是</p><p>从数据源到云计算中心路径之间的任意<strong>计算和网络资源</strong>，是一个<strong>连续统</strong></p></li><li><p>与云计算关系</p><p>相辅相成，边缘计算需要云计算中心强大的计算能力和海量数据的支持；云计算中心需要边缘计算中边缘设备对海量数据及隐私数据的处理。</p></li><li><p>优点</p><ol><li>不把数据传入云端，极大减轻了网络带宽和数据中心功耗的压力；</li><li>不需要通过网络请求云计算中心的响应，减少了系统延迟、增强了服务响应能力。</li><li>隐私数据存在网络边缘设备，减少数据泄露风险，保护用户隐私。</li></ol></li></ol><h5 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h5><ol><li><p>技术储备期</p><ol><li><p>内容分发网络(CDN，content delivery netword)</p><p>基于互联网缓存网络，依靠部署在各地的缓存服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，将用户的访问指向距离最近的缓存服务器上，以此降低网络拥塞，提高用户访问响应速度和命中率。</p></li><li><p>功能缓存（function cache）</p><p>CDN强调内容的备份和缓存，边缘则是功能缓存。</p></li><li><p>小朵云（Cloudlet）</p><p>可信且自愿丰富的主机，部署在网络边缘，与互联网连接，移动设备可访问并提供服务。强调下行，即将云服务器上的功能下行至边缘服务器，减少带宽和时延。</p></li><li><p>移动边缘计算（MEC，mobile edge computing）</p><p>接近移动用户的无线接入网范围内，提供信息技术服务和云计算能力的一种新的网络结构，已成为一种标准化、规范化的技术。它强调在云计算中心与边缘计算设备之间建立边缘服务器，在边缘服务器上完成终端数据的计算任务。</p></li><li><p>雾计算（fog computing）</p><p>迁移云计算中心任务到网络边缘设备执行的一种高度虚拟化计算平台。通过减少云计算中心和移动用户之间的通信次数，缓解主干链路的贷款负载和能耗压力。关注基础设施之间的分布式资源共享问题。</p></li><li><p>海云计算（cloud-sea computing）</p></li></ol></li><li><p>快速增长期</p></li><li><p>稳健发展期</p></li></ol><h5 id="七项核心技术"><a href="#七项核心技术" class="headerlink" title="七项核心技术"></a>七项核心技术</h5><h6 id="1-网络"><a href="#1-网络" class="headerlink" title="1. 网络"></a>1. 网络</h6><p>​    将计算推至靠近数据源的位置，甚至将整个计算部署于从数据源到云计算中心的传输路径上的节点。三个新要求：</p><ol><li><p>服务发现</p><p>计算服务请求者的动态性，如何知道周边的服务？</p></li><li><p>快速配置</p><p>用户、计算设备动态增加、减少（车……），服务也要迁移，导致大量突发网络流量。而广域网的网络情况比云计算中心复杂，带宽也有限。如何从设备层支持服务的快速配置？</p></li><li><p>负载均衡</p><p>边缘设备产生大量数据，边缘服务器提供大量服务，根据服务器和网络状况，如何动态调度到合适的计算服务提供者？解决方法：</p></li></ol><p>“建立一条从边缘到云的计算路径” 解决方法：</p><ul><li><p>命名数据网络（NDN，named data networking）</p><p>将数据和服务进行命名和寻址，以P2P和中心化方式相结合进行自组织的一种数据网络。</p><p>数据从源到云的传输关系？——使用NDN解决计算链路中服务发现的问题。</p></li><li><p>软件定义网络（SDN，software defined networking）</p><p>控制面和数据面分离的可编程网络+简单网络管理。网络管理者可以快速进行路由器、交换机的配置，减少网络的抖动，支持快速流量迁移。</p><p>数据服务迁移，网络层面的动态性请求？——结合SDN</p></li></ul><h6 id="2-隔离技术"><a href="#2-隔离技术" class="headerlink" title="2. 隔离技术"></a>2. 隔离技术</h6><p>​    边缘设备需要通过有效的隔离技术来保证服务的可靠性和服务质量。</p><ol><li><p>计算资源的隔离：应用间不能互相干扰。</p></li><li><p>数据的隔离：不同应用程序具有不同的访问权限。</p><p>——VM虚拟机、Docker容器技术</p><ul><li>Docker技术：实现应用在基于OS级虚拟化的隔离环境中运行，其存储驱动程序采用容器内分层镜像的结构，使得应用程序可以作为一个容器快速打包和发布，保证了应用间隔离。</li></ul></li></ol><h6 id="3-体系结构"><a href="#3-体系结构" class="headerlink" title="3. 体系结构"></a>3. 体系结构</h6><p>​    未来的体系结构应该是？通用处理器和异构计算硬件并存的模式。</p><p>​    异构硬件牺牲部分通用计算能力，使用专用加速单元减小了某一类或多类负载的执行时间。</p><p>​    边缘计算常针对某一类特定的计算场景设计边缘计算平台的体系结构。</p><h6 id="4-边缘操作系统"><a href="#4-边缘操作系统" class="headerlink" title="4. 边缘操作系统"></a>4. 边缘操作系统</h6><p>​    边缘操作系统，向下管理异构的计算资源，向上处理大量的异构数据以及多用的应用负载，负责将计算任务在边缘计算节点上部署、调度、迁移，从而保证计算任务的可靠性以及资源的最大化利用。倾向于对数据、计算任务、计算资源的管理框架。</p><ul><li><p>机器人操作系统（ROS，robot operating system)</p><p>提供硬件抽象和驱动、消息通信标准、软件包管理……</p></li></ul><h6 id="5-算法执行框架"><a href="#5-算法执行框架" class="headerlink" title="5. 算法执行框架"></a>5. 算法执行框架</h6><p>​    人工智能算法——在云数据中心，算法执行框架更多执行<strong>模型训练</strong>，输入的是大规模的批量数据集，关注的是训练时的迭代速度、收敛率和框架的可扩展性；在边缘设备上，执行<strong>预测任务</strong>，输入实时小规模数据，其计算资源存储资源受限，更关注算法执行框架预测式的速度、内存占用量和能效。</p><table><thead><tr><th>属性</th><th>云服务器</th><th>边缘设备</th></tr></thead><tbody><tr><td>输入</td><td>大规模、批量数据集</td><td>小规模、实时</td></tr><tr><td>任务</td><td>训练、预测</td><td>预测</td></tr><tr><td>关注点</td><td>训练的迭代速度、收敛率、框架可扩展性</td><td>预测速度延迟、内存占用量、能效</td></tr></tbody></table><p>支持边缘设备执行智能任务、针对边缘设备的算法执行框架：TensorFlow Lite、Caffe2、PyTorch、MXnet……但是没有一个能在所有的关注点维度都取得最好的表现。</p><h6 id="6-数据处理平台"><a href="#6-数据处理平台" class="headerlink" title="6. 数据处理平台"></a>6. 数据处理平台</h6><p>​    边缘设备时刻产生海量数据，来源和类型多样化，大多具有时空属性。构建数据处理平台，针对边缘数据进行管理、分析和共享。</p><ul><li>OpenVDAP：异构计算平台、操作系统、驾驶数据收集器、应用程序库。安装部署，完成车载应用计算、车与云、车与车、车与路边计算单元的通信。</li></ul><h6 id="7-安全和隐私"><a href="#7-安全和隐私" class="headerlink" title="7. 安全和隐私"></a>7. 安全和隐私</h6><p>​    处于靠近用户侧、传输路径上的数据，更容易被入侵。边缘计算节点的分布式、异构型——难以统一管理。存在安全问题：应用安全、网络安全、信息安全和系统安全。</p><ul><li><p>密码学——信息安全，</p></li><li><p>访问控制策略——越权访问防护</p></li><li><p>机器学习</p></li><li><p>可信执行环境（TEE，trusted execution environment）</p><p>在设备上一个独立于不可信操作系统而存在的可信的、隔离的、独立的执行环境，通过硬件机制来保障（Intel软件防护扩展、Intel管理引擎、x86系统管理模式、AMD内存加密……）。通过将应用运行到可惜的执行环境中，并将使用到的外存进行加解密，故当边缘计算节点被攻破时，其应用与数据仍然能保证安全。</p></li></ul><h5 id="六大典型应用"><a href="#六大典型应用" class="headerlink" title="六大典型应用"></a>六大典型应用</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h4 id=&quot;总体介绍框架&quot;&gt;&lt;a href=&quot;#总体介绍框架&quot; class=&quot;headerlink&quot; title=&quot;总体介绍框架&quot;&gt;&lt;/a&gt;总体介绍框架&lt;/h4&gt;&lt;ol&gt;
&lt;l
      
    
    </summary>
    
      <category term="study &amp; plan" scheme="http://github.com/xxq1999/categories/study-plan/"/>
    
    
      <category term="边缘计算" scheme="http://github.com/xxq1999/tags/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>笔试回顾</title>
    <link href="http://github.com/xxq1999/2021/04/11/%E7%AC%94%E8%AF%95%E5%9B%9E%E9%A1%BE/"/>
    <id>http://github.com/xxq1999/2021/04/11/笔试回顾/</id>
    <published>2021-04-11T10:22:00.000Z</published>
    <updated>2021-04-12T06:51:05.394Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="美团"><a href="#美团" class="headerlink" title="美团"></a>美团</h3><blockquote><p>买房子。</p><p>在一条直线上有n个房子，房子之间的距离都相等。每个房子有价格a[i]，小团知道小美的房子就在某一些房子的其中一间。现在小团要买房子，她想买到小美的房子期望距离最短的一间，同时，又不能花超过k的价钱，若有多个选择，选择编号小的。</p><p>输入：</p><p>一个n，一个k，代表房子的数量，最高的价格。</p><p>接下来n个整数，代表每个房子的价格，若某个房子价格为0，则小美可能住在这个房子里，且小团不能买这个房子。</p><p>输出：</p><p>房子编号。</p><p>2&lt;=n&lt;=100, 1&lt;k,a[i]&lt;100。 </p></blockquote><blockquote><p>射箭比赛。</p><p>A队和B队分别有n、m个人参加射箭比赛。B队队长知道A、B两队会有多少人射中靶心，且知道每个人射中时，距离靶心有多远。比赛规定，射中靶心的人，当距离小于k时，得1分，当距离大于等于k时，得2分。假设距离在[1,1000]之间，那么当k等于某个值时，A队得分为AS，B队得分为BS，问BS-AS最大可以为多少？若BS&lt;AS，输出0。</p><p>n,m&lt;1e5 </p></blockquote><blockquote><p>魔法字符串。</p><p>有长度为n的01字符串，小团可以对它施加魔法，做一次魔法，就能随机消除掉三个连续的字符，问0与1的差值最大可以为多少？</p><p>n&lt;1e5?</p></blockquote><blockquote><p>字符串。</p><p>如果一个小写的英文字符串内，包含最多的英文字母出现的次数大于等于一半，那么它就是ok字符串。给你一个字符串，问你它有多少字串满足ok字符串？</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;美团&quot;&gt;&lt;a href=&quot;#美团&quot; class=&quot;headerlink&quot; title=&quot;美团&quot;&gt;&lt;/a&gt;美团&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;买房子。&lt;/p
      
    
    </summary>
    
      <category term="Job" scheme="http://github.com/xxq1999/categories/Job/"/>
    
    
      <category term="笔试" scheme="http://github.com/xxq1999/tags/%E7%AC%94%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer</title>
    <link href="http://github.com/xxq1999/2021/04/10/%E5%89%91%E6%8C%87offer/"/>
    <id>http://github.com/xxq1999/2021/04/10/剑指offer/</id>
    <published>2021-04-10T03:13:00.000Z</published>
    <updated>2021-04-12T14:19:25.048Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>一边看书一边刷题</p><a id="more"></a><h2 id="1-赋值运算符函数"><a href="#1-赋值运算符函数" class="headerlink" title="1. 赋值运算符函数"></a>1. 赋值运算符函数</h2><blockquote><p>类型CMyString，添加一个赋值运算符函数。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CMyString</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CMyString(<span class="keyword">char</span>* pData=<span class="literal">nullptr</span>);</span><br><span class="line">CMyString(<span class="keyword">const</span> CMyString&amp; cMyString);</span><br><span class="line">~CMyString(<span class="keyword">void</span>);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span>* m_pData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>返回值</strong></li></ul><p>str1=str2=str3（为了连续赋值的可能性）</p><p>将返回值设置为该类型的引用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>传入参数</strong></li></ul><p>常量引用，如果传入的不是引用而是实例的话，那么从形参到实参，就会多调用一次拷贝构造函数，降低效率。</p><ul><li><strong>释放内存</strong></li></ul><p>防止内存泄漏。</p><ul><li><strong>细节</strong></li></ul><p>要判断传入的参数与赋值的是不是同一个，这样如果释放内存的话，就会导致传入的参数也被释放了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CMyString&amp; CMyString::Operator=(<span class="keyword">const</span> CMyString&amp; cMyString)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>==&amp;cMyString)</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"><span class="comment">// 释放原有的空间</span></span><br><span class="line"><span class="keyword">delete</span>[] m_pData;</span><br><span class="line">m_pData=<span class="literal">nullptr</span>;</span><br><span class="line"><span class="comment">// 申请一块新的空间，并赋值</span></span><br><span class="line">m_pData=<span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(cMyString.m_pData)+<span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(m_pData,cMyString.m_pData);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CMyString&amp; CMyString::Operator=(<span class="keyword">const</span> CMyString&amp; cMyString)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>!=&amp;cMyString)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 新建一个临时的实例</span></span><br><span class="line">CMyString new_str(cMyString);</span><br><span class="line"><span class="comment">// 指针指向这临时实例的地址</span></span><br><span class="line"><span class="keyword">char</span> *temp = new_str.m_pData;</span><br><span class="line"><span class="comment">// 临时实例的char指向赋值对象的地址</span></span><br><span class="line">new_str.m_pData = m_pData;</span><br><span class="line"><span class="comment">// 赋值对象的地址指向指针的地址。</span></span><br><span class="line">m_pData = temp;</span><br><span class="line">&#125; <span class="comment">// 跳出if后，临时实例被析构，指向地址的空间被自动释放</span></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><em>把一个CMyString的实例赋值给另一个实例</em>。</li><li><em>把一个CMyString的实例赋值给它自己</em>。</li><li><em>连续赋值。</em> </li></ol><br><h2 id="2-C-单例模式"><a href="#2-C-单例模式" class="headerlink" title="2. C# 单例模式"></a>2. C# 单例模式</h2><br><h2 id="3-数组"><a href="#3-数组" class="headerlink" title="3. 数组"></a>3. 数组</h2><h6 id="sizeof"><a href="#sizeof" class="headerlink" title="sizeof"></a><strong>sizeof</strong></h6><ul><li><p>int类型，一个占4字节。int a[]={1,2,3,4,5}, 则sizeof(a) = 20。</p></li><li><p>对指针int* p = a, 则sizeof(p) = 4。</p></li><li><p>当数组通过函数的参数进行传递时，数组就自动退化为同类型的指针。因此对于函数中的数组参数sizeof，结果也是4。</p></li></ul><h6 id="数组中重复元素"><a href="#数组中重复元素" class="headerlink" title="数组中重复元素"></a><strong>数组中重复元素</strong></h6><blockquote><p>n个整数，a[i]∈[0,n-1]，a中有重复的数字，也不知道重复了几次，有几个数字重复，求所有的重复数字。</p></blockquote><ol><li>a[5] = 3, 则另a[3] = n+a[3]，判断a[3] 是否&gt;2n，如果大于2n，说明已重复；</li><li>a[1] = 3，a[3]=2，a[8]=1，则另a[1]与a[3]交换，再a[1]与a[8]换，直到a[i]=i，如果在交换的过程中发现，a[i]已经等于i了，那么i重复了。</li></ol><p>上述，时间复杂度为O(n)，空间复杂度O(1)。</p><p>如果不能修改数组呢？</p><ul><li><p>二分（需要自己写一下）</p><p>长度为8的数组{2,3,5,4,3,2,6,7}，从中间数字4，分为1-4，5-7，那么先判断1~4的数字一共出现了几次，不难发现是5次，那么一定有重复的数字……</p><p>这种方法不可保证能找到所有重复的数字。</p></li></ul><h6 id="二维数组中的查找"><a href="#二维数组中的查找" class="headerlink" title="二维数组中的查找"></a>二维数组中的查找</h6><blockquote><p>在一个二维数组中，每一行都按照从左到右递增，每一列从上到下递增。</p><p>输入这样的二维数组，判断该数组中是否含有某一整数。</p></blockquote><p>思路：从右上角判断，剔除一列、一行，缩小范围。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">findNumberIn2DArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> curi,curj;</span><br><span class="line">        <span class="keyword">int</span> n,m;</span><br><span class="line">        n=matrix.size();</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        m=matrix[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        curi=<span class="number">0</span>;</span><br><span class="line">        curj=m<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>((!flag)&amp;&amp;curi&lt;n&amp;&amp;curj&lt;m&amp;&amp;curi&gt;=<span class="number">0</span>&amp;&amp;curj&gt;=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(matrix[curi][curj]&gt;target)</span><br><span class="line">                curj=curj<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(matrix[curi][curj]&lt;target)</span><br><span class="line">                curi=curi+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                flag=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br><h2 id="4-字符串"><a href="#4-字符串" class="headerlink" title="4. 字符串"></a>4. 字符串</h2><h6 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> s1[]=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> s2[]=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">char</span>* s3=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">char</span>* s4=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="comment">//判断s1与s2，s3与s4是否相同</span></span><br></pre></td></tr></table></figure><h6 id="替换空格"><a href="#替换空格" class="headerlink" title="替换空格"></a>替换空格</h6><blockquote><p>将字符串中每个空格替换成”%20”</p></blockquote><p>思考：提前申请空间。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">replaceSpace</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p1,p2;</span><br><span class="line">        p1=s.length()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=p1;i++) <span class="comment">//这里也可以for(char/auto c : s) if(c==&#x27; &#x27;) ..</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">&#x27; &#x27;</span>) </span><br><span class="line">                cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        p2=p1+<span class="number">2</span>*cnt;</span><br><span class="line">        s+=<span class="built_in">string</span>(cnt*<span class="number">2</span>,<span class="string">&#x27; &#x27;</span>); <span class="comment">// 或者直接用char* c=new char[],然后s=string(c)</span></span><br><span class="line">        <span class="comment">// s.resize(p1+2*cnt);</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=p1;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]!=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">                s[p2--]=s[i];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                s[p2--]=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                s[p2--]=<span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">                s[p2--]=<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br><h2 id="5-链表"><a href="#5-链表" class="headerlink" title="5. 链表"></a>5. 链表</h2><br><h2 id="6-树"><a href="#6-树" class="headerlink" title="6. 树"></a>6. 树</h2><h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h4><p>先序遍历、中序遍历、后序遍历、层次遍历</p><h6 id="重建二叉树"><a href="#重建二叉树" class="headerlink" title="重建二叉树"></a>重建二叉树</h6><blockquote><p>输入二叉树的前序、中序遍历的结果，重建该二叉树。假设输入的遍历结果中都不含重复的数字。</p></blockquote><p>思路：先序中取得根节点，在中序中查找根节点，左边的是左子树，右边的是右子树，递归。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMe</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; inorder,<span class="keyword">int</span> cur,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)</span><br><span class="line">            <span class="keyword">if</span>(inorder[i]==cur)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;;</span><br><span class="line">   </span><br><span class="line">    <span class="function">TreeNode* <span class="title">solve</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; preorder, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; inorder,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> cur)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        TreeNode* tree = <span class="keyword">new</span> TreeNode(preorder[cur]);</span><br><span class="line">        <span class="keyword">int</span> x = getMe(inorder,preorder[cur],l,r);</span><br><span class="line">        tree-&gt;left = solve(preorder,inorder,l,x<span class="number">-1</span>,cur+<span class="number">1</span>);</span><br><span class="line">        tree-&gt;right = solve(preorder,inorder,x+<span class="number">1</span>,r,cur+<span class="number">1</span>+x-l);</span><br><span class="line">        <span class="keyword">return</span> tree;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; preorder, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; inorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size=preorder.size();</span><br><span class="line">        <span class="keyword">if</span>(size==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> solve(preorder,inorder,<span class="number">0</span>,size<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h6 id="二叉树的下一个节点"><a href="#二叉树的下一个节点" class="headerlink" title="二叉树的下一个节点"></a>二叉树的下一个节点</h6><blockquote><p>给定一棵二叉树和其中一个节点，如何找出中序遍历序列的下一个节点？树中的节点除了两个左右子树的指针，还有一个父节点指针。</p></blockquote><p>讲一下思路，这里的思路就是分类讨论：</p><table><thead><tr><th align="left">类型</th><th align="left">做法</th></tr></thead><tbody><tr><td align="left">存在右子节点</td><td align="left">找到右子节点的最左节点</td></tr><tr><td align="left">不存在右子节点，是父节点的左子节点</td><td align="left">父节点</td></tr><tr><td align="left">不存在右子节点，是父节点的右子节点</td><td align="left">向上寻找，直到找到一个点是父节点的左子节点</td></tr></tbody></table><h6 id="中序遍历二叉树（递归与非递归）"><a href="#中序遍历二叉树（递归与非递归）" class="headerlink" title="中序遍历二叉树（递归与非递归）"></a>中序遍历二叉树（递归与非递归）</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 递归实现</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recurse_solve</span><span class="params">(TreeNode* p,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vv)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;left!=<span class="literal">nullptr</span>)</span><br><span class="line">            recurse_solve(p-&gt;left,vv);</span><br><span class="line">        vv.push_back(p-&gt;val);</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;right!=<span class="literal">nullptr</span>)</span><br><span class="line">            recurse_solve(p-&gt;right,vv);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 栈非递归实现</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stack_solve</span><span class="params">(TreeNode* root, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vv)</span></span>&#123;</span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt;myst;</span><br><span class="line">        TreeNode* p = root;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">nullptr</span>||!myst.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p!=<span class="literal">nullptr</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                myst.push(p);</span><br><span class="line">                p=p-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                p=myst.top();</span><br><span class="line">                myst.pop();</span><br><span class="line">                vv.push_back(p-&gt;val);</span><br><span class="line">                p=p-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 主函数</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vv;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>) <span class="keyword">return</span> vv;</span><br><span class="line">        stack_solve(root,vv);</span><br><span class="line">        <span class="keyword">return</span> vv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h5><p>O(logn)</p><h5 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h5><h5 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h5><blockquote><p>把树中的节点定义为红、黑两种颜色，并通过规则确保从根节点到叶子节点的最长路径的长度不超过最短路径的两倍。</p><p>在C++的STL中，set、multiset、map、multimap等数据结构都是基于红黑树实现的。</p></blockquote><br><h2 id="7-栈和队列"><a href="#7-栈和队列" class="headerlink" title="7. 栈和队列"></a>7. 栈和队列</h2><h6 id="用两个栈实现队列"><a href="#用两个栈实现队列" class="headerlink" title="用两个栈实现队列"></a>用两个栈实现队列</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">略</span><br></pre></td></tr></table></figure><h6 id="求斐波那契数列n项"><a href="#求斐波那契数列n项" class="headerlink" title="求斐波那契数列n项"></a>求斐波那契数列n项</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">    <span class="keyword">int</span> eMarix[<span class="number">2</span>][<span class="number">2</span>]=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">recurse</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> (fib(n<span class="number">-1</span>)+fib(n<span class="number">-2</span>))%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 普通</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">normal</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> last1=<span class="number">0</span>,last2=<span class="number">1</span>,temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = last2;</span><br><span class="line">            last2 = (last1+last2)%MOD;</span><br><span class="line">            last1 = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> last2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">marix_solve</span><span class="params">(<span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">2</span>],<span class="keyword">int</span> b[<span class="number">2</span>][<span class="number">2</span>])</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> temp[<span class="number">2</span>][<span class="number">2</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">2</span>;k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    temp[i][j]+=<span class="number">1l</span>l*a[i][k]*b[k][j]%MOD;</span><br><span class="line">                &#125;</span><br><span class="line">                temp[i][j]%=MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)</span><br><span class="line">                a[i][j]=temp[i][j];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 矩阵快速幂</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">marix</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 0,1,1,2,3,5,8</span></span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> curMarix[<span class="number">2</span>][<span class="number">2</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">while</span>(n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(n&amp;<span class="number">1</span>)</span><br><span class="line">                marix_solve(curMarix,eMarix);</span><br><span class="line">            marix_solve(eMarix,eMarix);</span><br><span class="line">            n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> curMarix[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 主函数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> marix(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>$$ {矩阵快速幂}<br>\begin{bmatrix}f(n) &amp; f(n-1) \ f(n-1) &amp; f(n-2)\ \end{bmatrix}<br>=<br>\begin{bmatrix}1 &amp; 1 \ 1 &amp; 0 \end{bmatrix}^{n-1}<br>$$</p><h2 id="8-查找和排序"><a href="#8-查找和排序" class="headerlink" title="8. 查找和排序"></a>8. 查找和排序</h2><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求非降序范围内第一个不小于value的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lower_bound</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[],<span class="keyword">int</span> n,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid,l=<span class="number">0</span>,r=n<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">mid = l+(r-l)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">array</span>[mid]&lt;value) l=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r=mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l;<span class="comment">//or return r;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//stl </span></span><br><span class="line">lower_bound(a,a+n,value)-a <span class="comment">// 第一个不小于value的位置</span></span><br><span class="line">upper_bound(a,a+n,value)-a <span class="comment">// 第一个大于value的位置</span></span><br></pre></td></tr></table></figure><h6 id="旋转数组的最小数"><a href="#旋转数组的最小数" class="headerlink" title="旋转数组的最小数"></a>旋转数组的最小数</h6><blockquote><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 [3,4,5,1,2] 为 [1,2,3,4,5] 的一个旋转，该数组的最小值为1。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; numbers)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=numbers.size();</span><br><span class="line">        <span class="keyword">int</span> mid,l=<span class="number">0</span>,r=len<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r) <span class="comment">// 如果当前值要比最后的值小，说明要往前找（包括本身）；如果当前值要比最后的值大，说明要往后找，还没到；如果相等，有可能还在前面（包括本身：1 3 3/5 4 4）……</span></span><br><span class="line">        &#123;</span><br><span class="line">            mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(numbers[mid]&lt;numbers[r])</span><br><span class="line">                r=mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(numbers[mid]&gt;numbers[r])</span><br><span class="line">                l=mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                r--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numbers[l];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> solve(numbers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><h3 id="交换数字"><a href="#交换数字" class="headerlink" title="交换数字"></a>交换数字</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只能对int 和 char</span></span><br><span class="line">x=x^y; </span><br><span class="line">y=x^y;</span><br><span class="line">x=x^y;</span><br><span class="line"></span><br><span class="line">x=x+y;</span><br><span class="line">y=x-y;</span><br><span class="line">x=x-y;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一边看书一边刷题&lt;/p&gt;
    
    </summary>
    
      <category term="目标" scheme="http://github.com/xxq1999/categories/%E7%9B%AE%E6%A0%87/"/>
    
    
  </entry>
  
  <entry>
    <title>研一下-&gt;暑期目标</title>
    <link href="http://github.com/xxq1999/2021/04/09/%E6%AF%8F%E6%97%A5%E5%AE%89%E6%8E%92/"/>
    <id>http://github.com/xxq1999/2021/04/09/每日安排/</id>
    <published>2021-04-09T03:13:00.000Z</published>
    <updated>2021-04-09T04:29:42.310Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><ul><li><p>总目标：找到实习</p></li><li><p>每日任务</p><ul><li>刷题</li><li>基础知识补足</li><li>拿出两个小时看论文+笔记</li></ul></li><li><p>思路</p><p>要么睡前看论文，要么起床后看</p><p>刷题LeetCode 剑指offer100题</p><p>基础知识：计网、操作系统、基础的数据结构、c++基础、linux知识</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;总目标：找到实习&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每日任务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;刷题&lt;/li&gt;
&lt;li&gt;基础知识补足&lt;/li&gt;
&lt;li&gt;拿出两个小时
      
    
    </summary>
    
      <category term="目标" scheme="http://github.com/xxq1999/categories/%E7%9B%AE%E6%A0%87/"/>
    
    
  </entry>
  
  <entry>
    <title>个人取向变化记录</title>
    <link href="http://github.com/xxq1999/2020/09/17/lyrics/"/>
    <id>http://github.com/xxq1999/2020/09/17/lyrics/</id>
    <published>2020-09-16T16:00:00.000Z</published>
    <updated>2021-04-09T04:51:55.915Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>每当我偶尔翻到以前写的、或者是摘录的文字的时候，总是感觉，咦……原来我那时候是这种调调啊……啧啧啧……</p><p>好奇自己究竟有什么“审美”上的变化过程，顺便也摘一些喜欢的句子，开了这部分记录，给自己以后回过头来翻看的时候用。</p><h2 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h2><p><em>21岁，自己最喜欢的还是音乐</em></p><hr><blockquote><p>在幻妙的时间里 有 望喜 和奇遇</p><p>在嘈杂的城市间 有永恒 的相遇</p><p>在有生之年里 常相伴 有知己</p><p>在漫妙的年龄享有 诚挚的 爱情</p></blockquote><p><strong>[ 勐巴拉娜西 ]</strong> 刺猬的歌总是能给我带来许多惊喜。这一段是最后子健写给小春天的祝福，真的很美好。</p><h2 id="文学"><a href="#文学" class="headerlink" title="文学"></a>文学</h2><blockquote><p>愿中国青年都摆脱冷气，只是向上走，不必听自暴自弃者流的话。能做事的做事，能发声的发声。有一分热，发一分光，就令萤火一般，也可以在黑暗里发一点光，不必等候炬火。此后如竟没有炬火，我便是唯一的光。</p><p>倘若有了炬火，出了太阳，我们自然心悦诚服的消失。不但毫无不平，而且还要随喜赞美这炬火或太阳；因为他照了人类，连我都在内。我又愿中国青年都只是向上走，不必理会这冷笑和暗箭。</p></blockquote><p><strong>[ 热风 · 随感录四十一 ]</strong> </p><blockquote><p>我凭依栏杆，细看那萤火虫。我和萤火虫双方都长久地一动未动。只有夜风从我们身边掠过。榉树在黑暗中磨擦着无数叶片，籁籁作响。 </p><p>我久久、久久地等待着。</p><p>过了很长很长时间，萤火虫才起身飞去。它顿有所悟似的，蓦地张开双翅，旋即穿过栏杆，淡淡的萤光在黑暗中滑行开来。它绕着水塔飞快地曳着光环，似乎要挽回失去的时光。为了等待风力的缓和，它又稍停了一会儿，然后向东飞去。 </p><p>萤火虫消失之后，那光的轨迹仍久久地印在我脑海中。那微弱浅淡的光点，仿佛迷失方向的魂灵，在漆黑厚重的夜幕中往来彷徨。</p><p>我几次朝夜幕中伸出手去，指尖毫无所触，那小小的光点总是同指尖保持着不可触及的距离。</p></blockquote><p><strong>[ 萤 ]</strong> 读了一遍《萤》，过程中一直被那种从何而来的悲伤笼罩着，心里又很安静很安静。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;每当我偶尔翻到以前写的、或者是摘录的文字的时候，总是感觉，咦……原来我那时候是这种调调啊……啧啧啧……&lt;/p&gt;
&lt;p&gt;好奇自己究竟有什么“审美”上的变化过程，顺便也摘一些喜欢
      
    
    </summary>
    
      <category term="Life &amp; Story" scheme="http://github.com/xxq1999/categories/Life-Story/"/>
    
    
      <category term="模板" scheme="http://github.com/xxq1999/tags/%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>幻象波普星</title>
    <link href="http://github.com/xxq1999/2020/09/16/%E8%B5%84%E6%BA%90/"/>
    <id>http://github.com/xxq1999/2020/09/16/资源/</id>
    <published>2020-09-16T04:34:00.000Z</published>
    <updated>2020-09-16T07:52:27.227Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="音乐区"><a href="#音乐区" class="headerlink" title="音乐区"></a>音乐区</h2><ul><li>《还愿》游戏原声带压缩包  <a href="https://pan.baidu.com/s/1QNMD75Z28f3BJm-4MrTedQ" title="《还愿》">百度网盘 提取码: 9m7x</a></li></ul><h2 id="书籍区"><a href="#书籍区" class="headerlink" title="书籍区"></a>书籍区</h2><ul><li><p>《迷茫的旅行商：一个无处不在的计算机算法问题》<a href="https://pan.baidu.com/s/1BQpElAkrS1XfGQAwDmhoIQ" title="l旅行商问题">百度网盘 提取码：tix6 </a></p></li><li><p>《三体》（epub格式）<a href="https://pan.baidu.com/s/1WJo_8nG2cqLilXdOgSQxQQ">百度网盘 提取码：zch6</a> </p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h2 id=&quot;音乐区&quot;&gt;&lt;a href=&quot;#音乐区&quot; class=&quot;headerlink&quot; title=&quot;音乐区&quot;&gt;&lt;/a&gt;音乐区&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;《还愿》游戏原声带压
      
    
    </summary>
    
      <category term="资源" scheme="http://github.com/xxq1999/categories/%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="音乐" scheme="http://github.com/xxq1999/tags/%E9%9F%B3%E4%B9%90/"/>
    
      <category term="下载" scheme="http://github.com/xxq1999/tags/%E4%B8%8B%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>把苦难也熬成绿豆汤</title>
    <link href="http://github.com/xxq1999/2020/05/18/%E8%80%83%E7%A0%94/"/>
    <id>http://github.com/xxq1999/2020/05/18/考研/</id>
    <published>2020-05-18T13:18:00.000Z</published>
    <updated>2020-12-19T06:40:04.791Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=516358164&auto=0&height=66"></iframe><p>什么时候能说明白自己心里的感受呢？</p><h2 id="得过且过汤"><a href="#得过且过汤" class="headerlink" title="得过且过汤"></a>得过且过汤</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;刚踏入二零二零年的时候，谁都没有想到接下来的几个月会这样过去。我对此感到不可思议，因为我常常思考的一个问题总是，“为什么是我呢”。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;奶奶说，我们晓青今年22岁，就是人生中会遇到坎的时候。大四，并不顺利的毕业设计，不上不下的初试成绩，divorce，急性肠胃炎，虚弱乏力，整日熬夜，昼夜颠倒……发胖，death。virus又好像让全世界的人都一起陪我倒霉。对啊，为什么呢？为什么这样一切都偏巧赶在一块儿了呢？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我不知道，此刻的我既唯物，又唯心，还是个主观唯心。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这样一段时间，我陷入焦虑和压抑，常常喜欢逃避。抓住一切可以出门的机会，去找他，去外边，离我的电脑越远越好，我不要想起这些东西，不要提起。我甚至开始恐惧，我怕如果考上了研究生，生活会更糟糕，于是我放弃了复试准备，我开始报名事业编制，一边询问身边所有人企图得到认同。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;放弃，听起来很可惜吧？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是消极成了全部。我真的很想要一碗汤，喝了这汤，一睡三天，只求结果，不问过程。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>幸好，没有这汤，夏天也会来的。</strong></p><h2 id="一个既幸运又幸福的家伙"><a href="#一个既幸运又幸福的家伙" class="headerlink" title="一个既幸运又幸福的家伙"></a>一个既幸运又幸福的家伙</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我觉得自己很倒霉。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这种倒霉就是每次做选择的时候，总能挑到最糟糕的那个。有的人就相反，运气总是很好。老实说我很嫉妒，并且无能为力。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;……可我好像也蛮幸运的。在关键时刻上，常常以为自己不行了，结果却出人意料。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;至于幸福，真的，平时感觉不到。唯有遇到苦难，才能在退出来之后，发现，哦，<strong>我原来是幸福的</strong>。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;就比如现在。</p><h2 id="MYSTERY-OF-LOVE"><a href="#MYSTERY-OF-LOVE" class="headerlink" title="MYSTERY OF LOVE"></a>MYSTERY OF LOVE</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我记得有一天我就躺在床上，然后阳台的门半开着，但是外面是阴天。我打开网易云，mystery of love，轻快明亮的曼陀铃，舒肤佳的声音唱着，我看着天花板，单曲循环一整个下午，然后阳光居然透过了云层中最薄的地方，照在了窗帘上……</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其实也没有什么特别的，只是当时特别安静，想起前一天晚上刚闹过脾气，听过家人朋友的安慰，告诉我没关系，很担心自己。哎，再难也就这样吧，我想，也没什么大不了的，对吧？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;房间里变得有点热热的，我换上了裙子，哦，穿不下了，不过没问题，他们不会嫌弃我的。<strong>裙子，裤子，其实都一样的，两个选择而已。</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那天我发了这样的一条心情：</p><blockquote><p>Mystery of Love<br>无论第几次听都会被惊艳到<br>无论现在是什么季节天上有几朵乌云<br>我好像就能从这间小小的，阴阴的屋子里看到了<br>那片森林，瀑布，草地，溪流，山脉，土壤……<br>生机勃勃的绿色从心底长出来了<br>空气变得热腾腾<br>喷泉无力的在暴晒下工作着<br>冰凉的 泳池的水<br>皮肤就要黏糊糊的了<br>眯缝着眼睛<br>和你分享一半的雪糕</p><p>……</p><p>阳光透过了黄色带花的窗帘<br>不用想象，夏天已经来了 </p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;是的，其实跟这首歌没关系，我知道夏天已经来了。</p><br><img src="https://xheartbeat.top/mdpicture/2020051802.jpg" alt="光">]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;8
      
    
    </summary>
    
      <category term="Life &amp; Story" scheme="http://github.com/xxq1999/categories/Life-Story/"/>
    
    
      <category term="随想" scheme="http://github.com/xxq1999/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>承诺</title>
    <link href="http://github.com/xxq1999/2020/01/18/%E6%89%BF%E8%AF%BA/"/>
    <id>http://github.com/xxq1999/2020/01/18/承诺/</id>
    <published>2020-01-18T14:11:00.000Z</published>
    <updated>2020-12-19T06:43:23.326Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><link href="/style.css" rel="stylesheet" type="text/css"><script src="/crypto-js.js"></script><script src="/mcommon.js"></script><script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" 记得 "> <label for="pass"> 记得 </label> <div class="bottom-line"></div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX19uxNbNswHCc4BQ5w9gs47I25MUII4PFbvLpP4iMc9jAzEisZAAzFLyGX6zB06cPKmhmT2Gz+wq62zcRQ25z1vQ/c3SiA6xW3w82wAck9/cjUpohPoscNLsJbpnFtbDJidlKhw9HVqh5zrLMvepa8lyA/xUCycIm9cgQXPH0/UbkKkOiFz59EfkKftLESVkbrncvbWwIbWZwYpZ3TcvKsrliggf6hNCMvx8Mk5/UGjxLCVHm3hUP5IgTXzQ2MH/o+bDSfc+SnBXuGhKILqRxlc48BcovCSP/qTnRqRC7QpGcqDYA10wyssA369hJj0S6c0EFRxDi6LMmvIZ2keXqD6rYrnKXAvZLWfboksN6KyUe5LnNFgAfj4S </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>How many integers can you find（容斥裸）</title>
    <link href="http://github.com/xxq1999/2018/09/08/How-many-integers-can-you-find%EF%BC%88%E5%AE%B9%E6%96%A5%E8%A3%B8%EF%BC%89/"/>
    <id>http://github.com/xxq1999/2018/09/08/How-many-integers-can-you-find（容斥裸）/</id>
    <published>2018-09-08T02:09:00.000Z</published>
    <updated>2020-09-16T04:56:59.171Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="How-many-integers-can-you-find"><a href="#How-many-integers-can-you-find" class="headerlink" title="How many integers can you find"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1796">How many integers can you find</a></h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>一个n，一个长度为m的集合，集合里面有m个元素，问小于n的所有能被集合中任意元素整除的数字有多少。</p><p>n&lt;2^31,m&lt;=10</p><h2 id="看！代码"><a href="#看！代码" class="headerlink" title="看！代码"></a>看！代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">int</span> p[MAXN];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="keyword">int</span> Result;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GCD</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="comment">//欧几里得算法，求最大公约数。</span></span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> GCD(b, a % b); <span class="comment">//辗转相除。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCM</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="comment">//求最小公倍数。</span></span><br><span class="line">    <span class="keyword">return</span> a / GCD(a, b) * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; <span class="comment">//深度优先搜索实现容斥原理。</span></span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">int</span> Cnt_Manifold; <span class="comment">//遍历到的数的数量（数集的数量）。</span></span><br><span class="line">    <span class="keyword">int</span> Least_Common_Multiple; <span class="comment">//遍历到的Cnt_Manifold个数的最小公倍数。</span></span><br><span class="line">    Result = <span class="number">0</span>; <span class="comment">//记录每次深度搜索的结果。</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; (<span class="number">1</span> &lt;&lt; m); i++) &#123; <span class="comment">//i的二进制位代表此次遍历查找的是那几个数</span></span><br><span class="line">        Cnt_Manifold = <span class="number">0</span>;</span><br><span class="line">        Least_Common_Multiple = <span class="number">1</span>; <span class="comment">//1与任何数的最小公倍数还是那个数本身，所以初值赋为1.</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">            <span class="keyword">if</span> (i &amp; (<span class="number">1</span> &lt;&lt; j)) &#123; <span class="comment">//筛选出要找的数并求出他们的最小公倍数。</span></span><br><span class="line">                Cnt_Manifold++;</span><br><span class="line">                Least_Common_Multiple = LCM(Least_Common_Multiple, p[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (Cnt_Manifold &amp; <span class="number">1</span>) &#123; <span class="comment">//奇数个为正偶数个为负，其作用相当于(-1)^(n - 1).</span></span><br><span class="line">            Result += n / Least_Common_Multiple;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Result -= n / Least_Common_Multiple;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; temp; <span class="comment">//去除了0的情况</span></span><br><span class="line">            <span class="keyword">if</span> (temp) &#123;</span><br><span class="line">                p[cnt++] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        m = cnt;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; Solve(n - <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;How-many-integers-can-you-find&quot;&gt;&lt;a href=&quot;#How-many-integers-can-you-find&quot; class=&quot;h
      
    
    </summary>
    
      <category term="算法" scheme="http://github.com/xxq1999/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="容斥" scheme="http://github.com/xxq1999/tags/%E5%AE%B9%E6%96%A5/"/>
    
  </entry>
  
  <entry>
    <title>容斥与鸽巢定理</title>
    <link href="http://github.com/xxq1999/2018/08/31/%E5%AE%B9%E6%96%A5%E4%B8%8E%E9%B8%BD%E5%B7%A2%E5%AE%9A%E7%90%86/"/>
    <id>http://github.com/xxq1999/2018/08/31/容斥与鸽巢定理/</id>
    <published>2018-08-31T04:44:00.000Z</published>
    <updated>2020-12-19T06:49:09.473Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="容斥"><a href="#容斥" class="headerlink" title="容斥"></a>容斥</h1><h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><p>$$<br>|A_1∪A_2∪…∪A_n|=\sum_{i=1}^n|A_i|-\sum_{i=1}^n\sum_{j&gt;i}|A_i∩A_j|+\sum_{i=1}^n\sum_{j&gt;i}\sum_{k&gt;j}|A_i∩A_j∩A_k|+…<br>$$</p><p>$$<br>+(-1)^{n-1}|A_1∩A_2∩…∩A_n|<br>$$</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="错排问题"><a href="#错排问题" class="headerlink" title="错排问题"></a>错排问题</h3><p><a href="http://xheartbeat.top/2018/08/14/%E9%94%99%E6%8E%92%EF%BC%88%E5%85%AC%E5%BC%8F+%E4%B8%89%E7%A7%8D%E7%94%9F%E6%88%90%EF%BC%89/">【已写】</a></p><h3 id="棋盘多项式与有禁区的排列"><a href="#棋盘多项式与有禁区的排列" class="headerlink" title="棋盘多项式与有禁区的排列"></a>棋盘多项式与有禁区的排列</h3><h4 id="布棋问题"><a href="#布棋问题" class="headerlink" title="布棋问题"></a>布棋问题</h4><p>一个n*m棋盘上放k个棋子，其中任意两个棋子不能位于同一行或者同一列上。问种数。</p><p><strong>布棋方案数</strong> $R_k(C)$ <strong>:</strong> k个棋子依照上述规则放在棋盘C中的方案数</p><p><strong>棋盘多项式：</strong> 棋盘C中放不限定数量的棋子,$R(C)=\sum_{k=0}^∞R_k(C)x^k$（有点母函数的味道），由于k&lt;=C(格子数)，因此这个多项式也是有限的。</p><p><strong>放置：</strong>  $R_k(C)=R_{k-1}(C_x)+R_k(C_e)$</p><p>C表示这个棋盘，$C_x$表示放在棋盘C除去这个格子所在的行和列之后的棋盘，$C_e$表示棋盘C删去这个格子后的棋盘。<br>那么这个公式的意思就是，在棋盘C上放k个棋子的种数，等于（第k个棋子放在一个格子上，前k-1个数量的格子放在除了这个格子所在的行和列的地方），加上，（k个棋子放在除了这个格子的其他地方）。</p><p><strong>棋盘多项式性质：</strong></p><ol><li>$R(C)=xR(C_x)+R(C_e)$</li><li>若C由两个互不干扰的棋盘组成，有$R(C)=R(C_1)·R(C_2)$</li></ol><img src="https://xheartbeat.top/mdpicture/%E7%A6%81%E5%8C%BA%E6%A3%8B%E7%9B%98%E6%8E%92%E5%88%97%E5%AE%9E%E4%BE%8B.jpg" height="635" width="413" alt="棋盘排列构造多项式，利棋盘多项式的性质，如图"><h4 id="有禁区的排列"><a href="#有禁区的排列" class="headerlink" title="有禁区的排列"></a>有禁区的排列</h4><p><strong>排列数定理：</strong><br>$$<br>n！-r_1(n-1)!+r_2(n-2)!-…±r_n<br>$$<br>$r_i$表示有$r_i$个棋子布置到禁区的方案数。（**<em>仅适用n·n的棋盘**</em>）</p><p><strong>&lt; 例题 &gt;</strong> 有1,2,3,4号工人，A,B,C,D四个人物，1号不做B，2号不做B、C，3号不做C、D，4号不做D，问有多少种分配方式？</p><p>【解】先构造一个4*4的棋盘，然后画出这个棋盘的禁区，对于这个禁区计算它的棋盘多项式，得$R(C)=1+6x+10x^2+4x^3$，因此用容斥的思想，得到：<br>$$<br>4!- 6·(4-1)!+10·(4-2)!-4·(4-3)! +0(4-4)!= 4<br>$$</p><img src="https://xheartbeat.top/mdpicture/%E7%A6%81%E5%8C%BA%E6%A3%8B%E7%9B%98%E4%BE%8B%E9%A2%98.jpg" height="123" width="296" alt="例题棋盘禁区如图所示，构造的多项式原理同上图"><h1 id="鸽巢定理"><a href="#鸽巢定理" class="headerlink" title="鸽巢定理"></a>鸽巢定理</h1><h2 id="基本定理"><a href="#基本定理" class="headerlink" title="基本定理"></a>基本定理</h2><p><strong>n+1只鸽子飞回n个鸽巢，至少有一个鸽笼含有不少于2只的格子。</strong></p><p><strong>数学描述：</strong></p><p><strong>m($1\le m$)个元素分成n个组，那么总有一个组至少含有元素个数$\lceil\frac{m}{n}\rceil$</strong></p><h2 id="小应用"><a href="#小应用" class="headerlink" title="小应用"></a>小应用</h2><ol><li><p><strong>对于正整数序列，$a_1，a_2，…，a_m$，至少存在整数k和l, $1\le k&lt;l\le m$，使得$a_k+a_{k+1}+…+a_l$是m的倍数。</strong></p><p>【证明】对每个元素$a_i$构造一个前缀和sum[i]，则有两种可能性：</p><p>(1) 若有一个sum[i]是m的倍数，则证毕；</p><p>(2) 若没有一个sum[i]为m的倍数，则令$r_h\equiv S_h mod\ m $ 。    </p><p>其中，h=1,2,…,m，我们已知上面所有的项都非m的倍数，故余数r[i]的范围在[1,m-1]，共m个数，根据鸽巢定理，m个余数在[1,m-1]共m-1的范围内至少存在一对$r_h$,$r_k$，满足$r_k=r_h$,则sum[k]和sum[h]满足：<br>$$<br>S_k\equiv S_h mod \ m<br>$$<br>设h&gt;k的话，得到<br>$$<br>S_h-S_k=(a_1+a_2+…+a_h)-(a_1+a_2+…+a_k)<br>=a_{k+1}+…+a_h\equiv 0\ mod \ m<br>$$<br>证毕。</p></li><li><p><strong>中国剩余定理</strong></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;容斥&quot;&gt;&lt;a href=&quot;#容斥&quot; class=&quot;headerlink&quot; title=&quot;容斥&quot;&gt;&lt;/a&gt;容斥&lt;/h1&gt;&lt;h2 id=&quot;公式&quot;&gt;&lt;a href=&quot;#公
      
    
    </summary>
    
      <category term="算法" scheme="http://github.com/xxq1999/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="学习" scheme="http://github.com/xxq1999/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>GCD?LCM!(莫比乌斯反演)</title>
    <link href="http://github.com/xxq1999/2018/08/20/GCDLCM!(%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94)/"/>
    <id>http://github.com/xxq1999/2018/08/20/GCDLCM!(莫比乌斯反演)/</id>
    <published>2018-08-20T15:17:00.000Z</published>
    <updated>2020-09-16T04:56:24.198Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="GCD-LCM"><a href="#GCD-LCM" class="headerlink" title=" GCD?LCM!"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5382"> GCD?LCM!</a></h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>哈哈哈哈哈懵逼钨丝做的我一本满足，爽歪歪，推公式好塔马有趣儿</p><p>咳咳，题目是：<br>$$<br>F(n)=\sum_{i=1}^n\sum_{j=1}^n[lcm(i,j)+gcd(i,j)\ge n]<br>$$</p><p>$$<br>S(n)=\sum_{i=1}^nF(n)<br>$$</p><p>t组，每组给你一个n，求S(n)。</p><p>t&lt;=1e5,n&lt;=1e6</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>$$<br>F(n)=\sum_{i=1}^n\sum_{j=1}^n[lcm(i,j)+gcd(i,j)\ge n]<br>$$</p><p>$$<br>=\sum_{i=1}^n\sum_{j=1}^n[lcm(i,j)+gcd(i,j)\ge n-1]-\sum_{i=1}^n\sum_{j=1}^n[lcm(i,j)+gcd(i,j)==n-1]<br>$$</p><p><code>由于对于后半部分来说，i，j=n时显然不符合，因此可直接降为n-1</code><br>$$<br>=\sum_{i=1}^n\sum_{j=1}^n[lcm(i,j)+gcd(i,j)\ge n-1]-\sum_{i=1}^{n-1}\sum_{j=1}^{n-1}[lcm(i,j)+gcd(i,j)==n-1]<br>$$<br><code>将前半部分转化成F(n-1)，故修改i，j的上限，而i，j=n时一定满足要求，因此要补上2n-1</code><br>$$<br>=\sum_{i=1}^{n-1}\sum_{j=1}^{n-1}[lcm(i,j)+gcd(i,j)\ge n-1]+(2n-1)-\sum_{i=1}^{n-1}\sum_{j=1}^{n-1}[lcm(i,j)+gcd(i,j)==n-1]<br>$$</p><p>$$<br>=F(n-1)+(2n-1)-\sum_{i=1}^{n-1}\sum_{j=1}^{n-1}[lcm(i,j)+gcd(i,j)==n-1]<br>$$</p><p><code>令后半部分为T(n-1),则：</code><br>$$<br>F(n)=F(n-1)+(2n-1)-T(n-1)<br>$$<br>接下来分析T(n)<br>$$<br>T(n)=\sum_{i=1}^n\sum_{j=1}^n[lcm(i,j)+gcd(i,j)==n]<br>$$<br>令d=gcd(i,j)，又由于lcm(i,j)=ij*(gcd(i,j))，令i=id，j=jd<br>$$<br>=\sum_{d|n}\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{n}{d}\rfloor}<br>[ijd+d==n][gcd(i,j)==1]<br>$$</p><p>$$<br>=\sum_{d|n}\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{n}{d}\rfloor}<br>[j=\frac{\frac{n}{d}-1}{i}][gcd(i,j)==1]<br>$$</p><p>$$<br>=\sum_{d|n}\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}<br>[gcd(i,\frac{\frac{n}{d}-1}{i})==1]<br>$$</p><p>由于$\ i = \frac{n}{d}$ 时，条件显然不成立，因此修改i的上限<br>$$<br>=\sum_{d|n}\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor-1}<br>[gcd(i,\frac{\frac{n}{d}-1}{i})==1]<br>$$<br>令后半部分为$ G(\frac{n}{d}-1) $<br>$$<br>T(n)=\sum_{d|n}G(\frac{n}{d}-1)<br>$$<br>接下来分析G(n)<br>$$<br>G(n)=\sum_{i=1}^n[gcd(i,\frac{n}{i})==1]<br>$$<br>要满足后半部分，我们打表（或者根据思考（？？？））发现<br>$$<br>G(n)=2^k,k为n的质因子个数<br>$$<br>那么到这里，基本上要推的就都推完了，</p><p>差一个总和。</p><p>由于：<br>$$<br>F(n)=F(n-1)+(2n-1)-T(n-1)<br>$$</p><p>$$<br>=F(n-2)+(2(n-1)-1)-T(n-2)+(2n-1)-T(n-1)<br>$$</p><p>$$<br>=F(n-3)+(2(n-2)-1)-T(n-3)+(2(n-1)-1)-T(n-2)+(2n-1)-T(n-1)<br>$$</p><p>$$<br>……<br>$$</p><p>$$<br>=F(1)+\sum_{i=1}^n(2i-1)-\sum_{i=0}^{n-1}T(i)<br>$$</p><p>故：<br>$$<br>S(n)=\sum_{i=1}^n(F(1)+\sum_{j=1}^i(2j-1)-\sum_{j=0}^{i-1}T(j))<br>$$</p><p>$$<br>S(n)=nF(1)+\sum_{i=1}^ni^2-\sum_{i=1}^n\sum_{j=0}^{i-1}T(i)<br>$$</p><p>$$<br>=n+\frac{n(n+1)(2n+1)}{6}-\sum_{i=1}^n\sum_{j=0}^{i-1}T(i)<br>$$</p><p>我们一步一步来：</p><ol><li>预处理，先筛出所有质数，然后是1~1e6的质因子个数，然后求得G(n)，再求得T(n)，然后对T(n)求一次前缀和得到每个sum[i]，再对每个sum[i]求前缀和ans[i]=sum[i-1]+ans[i-1]。</li><li>没有2了，对于每个输入的n直接用刚刚最后那个公式带进去算就好了：</li></ol><p>$$<br>S(n)=n+\frac{n(n+1)(2n+1)}{6}-ans[n]<br>$$</p><p>哦，别忘了取模。</p><h2 id="看！代码"><a href="#看！代码" class="headerlink" title="看！代码"></a>看！代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">258280327</span>;</span><br><span class="line"><span class="comment">/** 对于μ函数的线筛 */</span></span><br><span class="line"><span class="keyword">int</span> prim[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">ll p[N]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">ll sum[N]=&#123;<span class="number">0</span>&#125;,ans[N]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">ll liu;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">PowerMod</span><span class="params">(ll x,ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(n&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">1</span>)</span><br><span class="line">   &#123;</span><br><span class="line">    res=res*x;</span><br><span class="line">    res=res%MOD;</span><br><span class="line">   &#125;</span><br><span class="line">   x=x*x;</span><br><span class="line">   x=x%MOD;</span><br><span class="line">   n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">(ll N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;i++) <span class="comment">//素数筛</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[i]==<span class="literal">false</span>)prim[++cnt]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cnt&amp;&amp;i*prim[j]&lt;N;j++)</span><br><span class="line">            vis[i*prim[j]]=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">1</span>;n&lt;=N;n++) <span class="comment">//求质因子个数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp=n;</span><br><span class="line">        <span class="keyword">for</span>(ll i=<span class="number">1</span>;prim[i]*prim[i]&lt;=tmp; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(tmp%prim[i]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                p[n]++;</span><br><span class="line">                <span class="keyword">while</span>(tmp%prim[i]==<span class="number">0</span>) tmp/=prim[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tmp&gt;<span class="number">1</span>)</span><br><span class="line">            p[n]++; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)  <span class="comment">//求2^k</span></span><br><span class="line">        p[i]=PowerMod(<span class="number">2</span>,p[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> d=<span class="number">1</span>;d&lt;=N;d++)  <span class="comment">//  求T(n)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k*d&lt;=N;k++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum[k*d]=(sum[k*d]+p[k<span class="number">-1</span>])%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sum[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) <span class="comment">//求sum[n]</span></span><br><span class="line">    &#123;</span><br><span class="line">        sum[i]=(sum[i]+sum[i<span class="number">-1</span>])%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) <span class="comment">//求ans[n]</span></span><br><span class="line">    &#123;</span><br><span class="line">        ans[i]=(sum[i<span class="number">-1</span>]+ans[i<span class="number">-1</span>])%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">ll <span class="title">cal</span><span class="params">(ll n)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n*(n+<span class="number">1</span>)%MOD*(<span class="number">2</span>*n+<span class="number">1</span>)%MOD*liu%MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    liu=PowerMod(<span class="number">6</span>,MOD<span class="number">-2</span>);</span><br><span class="line">    Solve(<span class="number">1000000</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    ll n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,(cal(n)+n-ans[n]+MOD)%MOD);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;GCD-LCM&quot;&gt;&lt;a href=&quot;#GCD-LCM&quot; class=&quot;headerlink&quot; title=&quot; GCD?LCM!&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http
      
    
    </summary>
    
      <category term="算法" scheme="http://github.com/xxq1999/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="莫比乌斯反演" scheme="http://github.com/xxq1999/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
  </entry>
  
  <entry>
    <title>带劲and和（连通块+&amp;结论）</title>
    <link href="http://github.com/xxq1999/2018/08/20/%E5%B8%A6%E5%8A%B2and%E5%92%8C%EF%BC%88%E8%BF%9E%E9%80%9A%E5%9D%97+&amp;%E7%BB%93%E8%AE%BA%EF%BC%89/"/>
    <id>http://github.com/xxq1999/2018/08/20/带劲and和（连通块+&amp;结论）/</id>
    <published>2018-08-19T17:42:00.000Z</published>
    <updated>2020-09-16T04:56:02.824Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="带劲的and和"><a href="#带劲的and和" class="headerlink" title="带劲的and和"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6411">带劲的and和</a></h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>度度熊有一张n个点m条边的<strong>无向图</strong>，第i个点的点权为vi。<br>如果图上存在一条<strong>路径</strong>使得点i可以走到点j，则称i,j是<strong>带劲</strong>的，记f(i,j)=1；否则f(i,j)=0。显然有f(i,j)=f(j,i)。<br>度度熊想知道求出：<br>$\sum_{i=1}^{n−1}\sum_{j=i+1}^nf(i,j)×max(v_i,v_j)×(v_i&amp;v_j)$<br>其中&amp;是C++中的and位运算符，如1&amp;3=1, 2&amp;3=2。<br>请将答案对109+7取模后输出。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>先处理连通块。</p><p>这里我用的是并查集，也可以用tarjan，然后对于每个连通块里的元素，我们按照从小到大排序。</p><p>由于比如 9 8 7 这部分时，默认我们已经知道9是最大的元素，那么一定是9*(9&amp;8+9&amp;7),由于与运算是只有两位上的数字均为1时才能有贡献，那么也就是说，我们不需要对于每两个数字都计算&amp;运算，而可以对每一个数字的二进制位进行处理，当第i位上为1时，count[i]++，只有count[i]上的数&gt;=2时，才算对于这个有了贡献，并且我们是用同一的9去进行与运算，在count位&gt;=2时，也只有满足当9上的第i位也为1时才算数。</p><p>因此从小到达排序之后，从第一个元素开始，在它前面的元素一定比它小，因此我们只要对于这个元素上为1的位进行查询，看它的count是否大于等于2，然后确定是否产生贡献，ans+了后再把当前元素的这一位的count[i]++即可。</p><h2 id="看！代码"><a href="#看！代码" class="headerlink" title="看！代码"></a>看！代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> id[N];</span><br><span class="line"><span class="keyword">int</span> sz[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> val[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span>  <span class="comment">///找跟根结点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x!=id[x])</span><br><span class="line">    &#123;</span><br><span class="line">        id[x]=id[id[x]];</span><br><span class="line">        x=id[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">un</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pr=Find(p);</span><br><span class="line">    <span class="keyword">int</span> qr=Find(q);</span><br><span class="line">    <span class="keyword">if</span>(pr==qr) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(sz[pr]&lt;=sz[qr])</span><br><span class="line">    &#123;</span><br><span class="line">        sz[qr]+=sz[pr];id[pr]=qr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        sz[pr]+=sz[qr];id[qr]=pr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        id[i]=i;sz[i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t,n,m,u,v;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        clear();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;fa[<span class="number">100010</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;val[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">            un(u,v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            fa[Find(i)].push_back(val[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            len=fa[i].size();</span><br><span class="line">            <span class="keyword">if</span>(len&gt;<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sort(fa[i].begin(),fa[i].end());</span><br><span class="line">                <span class="keyword">int</span> wei[<span class="number">32</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">long</span> <span class="keyword">long</span> tmp=fa[i][j];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">30</span>&amp;&amp;tmp&gt;<span class="number">0</span>;k++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(tmp&amp;<span class="number">1</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            ans=(ans+<span class="number">1l</span>l*wei[k]*fa[i][j]%MOD*(<span class="number">1</span>&lt;&lt;k)%MOD)%MOD;</span><br><span class="line">                            wei[k]++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        tmp&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;带劲的and和&quot;&gt;&lt;a href=&quot;#带劲的and和&quot; class=&quot;headerlink&quot; title=&quot;带劲的and和&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http:/
      
    
    </summary>
    
      <category term="算法" scheme="http://github.com/xxq1999/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Mophues(莫比乌斯反演)</title>
    <link href="http://github.com/xxq1999/2018/08/20/Mophues(%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94)/"/>
    <id>http://github.com/xxq1999/2018/08/20/Mophues(莫比乌斯反演)/</id>
    <published>2018-08-19T17:09:00.000Z</published>
    <updated>2020-09-16T04:55:49.654Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="Mophues"><a href="#Mophues" class="headerlink" title="  Mophues"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4746">  Mophues</a></h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>若a的质因子个数&lt;=P，则称a为p的一个lucky number。</p><p>给你n，m，P，求在n，m范围内的i，j，gcd(i,j)是P的lucky number，这样的i，j有几对？</p><p>n，m，P&lt;=5e5。多组不超过5000组。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>题意就是让我们求：<br>$$<br>\sum_{i=1}^n\sum_{j=1}^mf(gcd(i,j)),其中f(x)表示x的质因子个数比p小<br>$$<br>反演过程就不具体写了，我们可以轻松得到结果：<br>$$<br>\sum_{t=1}^{min(n,m)}\lfloor\frac{n}{t}\rfloor\lfloor\frac{m}{t}\rfloor\sum_{d|t}f(d)μ(\frac{t}{d})<br>$$<br>经过计算我们发现，5e5内的数字最大的质因数个数为18，那么对于大于18的p我们就可以降为18。</p><p>首先对5e5内的数预处理出它们的质因子个数。</p><p>然后枚举d，用sum[i][j]表示当t=i时，质因子个数为j的数的μ之和。</p><p>再对sum[i][j]求t=i时质因子个数小于等于j的μ之和。</p><p>然后对每一个t的sum求一个前缀和。</p><p>就可以分块做了。</p><p>注意ans和sum还是要开longlong。</p><h2 id="看！代码"><a href="#看！代码" class="headerlink" title="看！代码"></a>看！代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">500010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="comment">/** 对于μ函数的线筛 */</span></span><br><span class="line"><span class="keyword">int</span> mu[N],prim[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">ll p[N]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">ll sum[N][<span class="number">21</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_mu</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">mu[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(!vis[i])&#123;prim[++cnt]=i;mu[i]=<span class="number">-1</span>;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt&amp;&amp;prim[j]*i&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">        vis[prim[j]*i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(i%prim[j]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span> mu[i*prim[j]]=-mu[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">(ll N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//int MAX=0;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">1</span>;n&lt;=N;n++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp=n;</span><br><span class="line">        <span class="keyword">for</span>(ll i=<span class="number">1</span>;prim[i]*prim[i]&lt;=tmp; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(tmp%prim[i]==<span class="number">0</span>) p[n]++,tmp/=prim[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tmp&gt;<span class="number">1</span>)</span><br><span class="line">            p[n]++;  <span class="comment">//这个不可以缺少</span></span><br><span class="line">        <span class="comment">//MAX=max(MAX,p[n]);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> d=<span class="number">1</span>;d&lt;=N;d++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k*d&lt;=N;k++)</span><br><span class="line">            sum[k*d][p[d]]+=mu[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;=N;t++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">18</span>;i++)</span><br><span class="line">            sum[t][i]+=sum[t][i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">19</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;=N;t++)</span><br><span class="line">            sum[t][i]+=sum[t<span class="number">-1</span>][i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t,n,m,u,v;</span><br><span class="line">    get_mu(<span class="number">500000l</span>l);</span><br><span class="line">    Solve(<span class="number">500000l</span>l);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n,m,P;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;P);</span><br><span class="line">        <span class="keyword">if</span>(P&gt;<span class="number">18</span>) P=<span class="number">18</span>;</span><br><span class="line">        <span class="keyword">int</span> MIN=min(n,m);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>,r;l&lt;=MIN;l=r+<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            r=min(n/(n/l),m/(m/l));</span><br><span class="line">            ans+=<span class="number">1l</span>l*(n/l)*(m/l)*(sum[r][P]-sum[l<span class="number">-1</span>][P]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;Mophues&quot;&gt;&lt;a href=&quot;#Mophues&quot; class=&quot;headerlink&quot; title=&quot;  Mophues&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http
      
    
    </summary>
    
      <category term="算法" scheme="http://github.com/xxq1999/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="莫比乌斯反演" scheme="http://github.com/xxq1999/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
  </entry>
  
  <entry>
    <title>CA Loves GCD(DP)</title>
    <link href="http://github.com/xxq1999/2018/08/19/CA-Loves-GCD(DP)/"/>
    <id>http://github.com/xxq1999/2018/08/19/CA-Loves-GCD(DP)/</id>
    <published>2018-08-19T15:09:00.000Z</published>
    <updated>2020-09-16T04:55:37.517Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="CA-Loves-GCD"><a href="#CA-Loves-GCD" class="headerlink" title="CA Loves GCD"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5656">CA Loves GCD</a></h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给你n个数，从里面任取几个（至少1个），计算它们的gcd，问你所有可能的取法的gcd之和。</p><p>对结果模1e8+7（注意是8）</p><p>n&lt;=1000</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>dp[i][j]表示取前i个数时gcd为j的种数。</p><p>取第i个时：dp[i][gcd(a[i],j)] += dp[i-1][j] ；</p><p>不取第i个时：dp[i][j] += dp[i-1][j]；</p><p>对1000内的任意两个数的gcd作预处理，i从0开始。</p><h2 id="看！代码"><a href="#看！代码" class="headerlink" title="看！代码"></a>看！代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e8</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">10000010</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1010</span>][<span class="number">1010</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> gcd[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1010</span>];</span><br><span class="line"><span class="comment">/*int ggcd(int a, int b) &#123;</span></span><br><span class="line"><span class="comment">    return b == 0 ? a : ggcd(b, a%b);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            gcd[i][j]=__gcd(i,j);</span><br><span class="line">            gcd[j][i]=gcd[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init(<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">int</span> t,n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="keyword">int</span> MAX=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">            MAX=max(MAX,a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=MAX;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j]=(dp[i][j]+dp[i<span class="number">-1</span>][j])%MOD;</span><br><span class="line">                dp[i][gcd[a[i]][j]]=(dp[i][gcd[a[i]][j]]+dp[i<span class="number">-1</span>][j])%MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=MAX;i++)</span><br><span class="line">            ans=(ans+<span class="number">1l</span>l*dp[n][i]*i)%MOD;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;CA-Loves-GCD&quot;&gt;&lt;a href=&quot;#CA-Loves-GCD&quot; class=&quot;headerlink&quot; title=&quot;CA Loves GCD&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="算法" scheme="http://github.com/xxq1999/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="dp" scheme="http://github.com/xxq1999/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>Hillan and the girl(莫比乌斯反演)</title>
    <link href="http://github.com/xxq1999/2018/08/19/Hillan-and-the-girl(%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94)/"/>
    <id>http://github.com/xxq1999/2018/08/19/Hillan-and-the-girl(莫比乌斯反演)/</id>
    <published>2018-08-19T10:09:00.000Z</published>
    <updated>2020-09-18T06:23:23.457Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="Hillan-and-the-girl"><a href="#Hillan-and-the-girl" class="headerlink" title="Hillan and the girl"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5663">Hillan and the girl</a></h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>对于1&lt;=n,m&lt;=1e7，T&lt;=1e4，求：<br>$$<br>\sum_{i=1}^{n}\sum_{j=1}^{m}f(gcd(i,j)),其中f(x)=1，当且仅当x为平方数<br>$$</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>来，让我们来反演一波：<br>$$<br>\sum_{d=1}^{mim(n,m)}f(d)\sum_{i=1}^n\sum_{j=1}^m[gcd(i,j)==d]<br>$$</p><p>$$<br>\sum_{d=1}^{min(n,m)}f(d)\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[gcd(i,j)==1]<br>$$</p><p>$$<br>\sum_{d=1}^{min(n,m)}f(d)\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}\sum_{t|gcd(i,j)}μ(t)<br>$$</p><p>$$<br>\sum_{d=1}^{min(n,m)}f(d)\sum_{i=1}^{\lfloor\frac{n}{dt}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{dt}\rfloor}\sum_{t=1}^{min(\lfloor\frac{n}{d}\rfloor,\lfloor\frac{m}{d}\rfloor)}μ(t)<br>$$</p><p>$$<br>\sum_{d=1}^{min(n,m)}f(d)\sum_{t=1}^{min(\lfloor\frac{n}{d}\rfloor,\lfloor\frac{m}{d}\rfloor)}μ(t){\lfloor\frac{n}{dt}\rfloor}{\lfloor\frac{m}{dt}\rfloor}<br>$$</p><p>令dt=T，则：<br>$$<br>\sum_{T=1}^{min(n,m)}{\lfloor\frac{n}{T}\rfloor}{\lfloor\frac{m}{T}\rfloor\sum_{d|T}f(d)}μ(\frac{T}{d})<br>$$<br>由于$d=x^2$<br>$$<br>\sum_{T=1}^{min(n,m)}{\lfloor\frac{n}{T}\rfloor}{\lfloor\frac{m}{T}\rfloor\sum_{x=1}^{min(\sqrt{n},\sqrt{m})}\sum_{x^2|T}}μ(\frac{T}{x^2})<br>$$<br>对于T的前半部分，我们可以用分块，复杂度为$\sqrt{n}$，对于后半部分，就可以预处理出来。</p><p>枚举x，以及每一个$x^2$的倍数$k·x^2$，处理出每一个T的对应的值，然后再求前缀和。</p><p>预处理部分的复杂度为O(n)，求的时候的复杂度为$O(T\sqrt{n})$。</p><h2 id="看！代码"><a href="#看！代码" class="headerlink" title="看！代码"></a>看！代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">10000010</span>;</span><br><span class="line"><span class="keyword">int</span> mu[N],prim[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum[N]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_mu</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mu[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])&#123;prim[++cnt]=i;mu[i]=<span class="number">-1</span>;&#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt&amp;&amp;prim[j]*i&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            vis[prim[j]*i]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%prim[j]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> mu[i*prim[j]]=-mu[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> d=<span class="number">1</span>;d*d&lt;=n;d++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k*d*d&lt;=n;k++)</span><br><span class="line">            sum[k*d*d]+=mu[k];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        sum[i]+=sum[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    get_mu(<span class="number">10000000</span>);</span><br><span class="line">    <span class="keyword">int</span> t,n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n,m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="keyword">int</span> MIN=min(n,m);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>,r;l&lt;=MIN;l=r+<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            r=min(n/(n/l),m/(m/l));</span><br><span class="line">            ans+=<span class="number">1l</span>l*(sum[r]-sum[l<span class="number">-1</span>])*(n/l)*(m/l);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="number">1l</span>l*n*m-ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;Hillan-and-the-girl&quot;&gt;&lt;a href=&quot;#Hillan-and-the-girl&quot; class=&quot;headerlink&quot; title=&quot;Hill
      
    
    </summary>
    
      <category term="算法" scheme="http://github.com/xxq1999/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="莫比乌斯反演" scheme="http://github.com/xxq1999/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
  </entry>
  
  <entry>
    <title>はなび</title>
    <link href="http://github.com/xxq1999/2018/08/19/%E5%B0%8F%E5%81%B7%E5%AE%B6%E6%97%8F/"/>
    <id>http://github.com/xxq1999/2018/08/19/小偷家族/</id>
    <published>2018-08-18T18:19:00.000Z</published>
    <updated>2020-12-19T06:40:57.024Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><img src="https://xheartbeat.top/mdpicture/海边.jpg" alt="海边"><p>我发现日本的电影或者是电视剧，总是生活的样子，不会把片子的色调调的明亮而饱和，不会把每个人脸上的斑点、皱纹、坑坑洼洼悄悄隐藏，而让坐在荧幕前面的我们只看到光滑的皮肤和胶原蛋白。</p><p>是走在大街上能看到的，二十多岁小姑娘，三四十岁的工厂的妇女，建筑工地上的工人，和蔼的老婆婆，还有那怯生生的孩子。</p><p>是贫穷的屋子里面拥挤的住着五口人，角角落落塞得满满当当。</p><p>是即使辛苦艰难，其中偷偷夹带着的小幸福。</p><p>尽管我从一开始就知道，他们并不是”一家人“。</p><p>尽管我想，要是一直在一起就好啦。</p><p>柴田在废弃的车子中找到不高兴的祥太，告诉他由理是他”妹妹“，你要叫我”爸爸“（祥太一直叫不出口），瘸着腿在路上和祥太玩闹；</p><p>信代和由理泡着澡，由理看见信代手臂上的伤疤，和妈妈用熨斗烫伤自己的伤疤一样，心疼的不停轻轻抚摸着信代受伤的地方，信代说谢谢你，已经一点都不疼啦；</p><p>洗完澡把由理来时的旧衣服烧了，信代紧紧的抱着由理，悲伤的好像要把由理揉进自己的怀抱里。对由理说才不是由理的错，如果有人说爱你才打你，那才不是真的，如果爱你的话，就会像我这样，这样抱着你；</p><p>大家一起看烟花，可是只听得见烟花的声音，却看不到烟花；</p><p>小卖铺的爷爷早就知道祥太总是把东西偷偷顺走，只是当看到由理也学着祥太的样子偷窃，他学着他们偷东西前的手势，告诉祥太，以后不要叫你妹妹这样了，然后送了他们两个果冻，祥太问要继续偷吗，柴田说超市里放着的东西不属于任何人，除非倒闭了；</p><p>大家一起去海边的时候，奶奶对信代说”你真漂亮，脸蛋“，后来信代也跑去和大家玩，然后奶奶一个人坐在沙滩上面，把沙子洒在自己长满老年斑的小腿上，看着这一瞬间的”家人们“，无声的说”谢谢你们“；</p><p>信代为了保住由理，丢了工作，和柴田在家里吃着面，她走去厨房，雷雨前的最后一丝阳光透过窗户落进来，信代穿着透明凉快的衣服，汗水浸湿了头发，浸湿了脸庞，浸湿了胳膊，柴田看呆了，信代亲了柴田，然后终于打雷了，大雨来了，屋子里都是热乎乎，热乎乎的味道。</p><p>但是总会被打破的。</p><p>奶奶在从海边回来后的某天安静的离开了，柴田想打救护车，信代却说，你敢叫救护车吗。殡仪馆火化这么贵。我们哪有钱。由理也想和奶奶一直在一起吧。那我们就一直陪着奶奶吧。于是在自家挖坑把奶奶埋葬了。</p><p>亚纪一直伤心。柴田对祥太说，我们一直是五个人，从来没有奶奶。</p><p>信代取了奶奶的银行卡，找到了奶奶藏起来的钱，和柴田开心的大笑。</p><p>柴田带着祥太砸车偷包，祥太开始不愿意这样做了。</p><p>便利店的爷爷也去世了。祥太带着由理去超市，叫由理在外面等着。由理却跑进来想和哥哥一起偷。祥太看见还这么小的妹妹，笨拙的学着自己，把一包零食塞进自己的衣服里，塑料包装发出响声。他看了一会，在店员面前抢了一带柚子，转身就跑。然后被店员追上，从桥上跳下去。他终于认识到，这样的生活，已经不能再继续下去了。他是故意的呀。</p><p>大家被发现了。想要抛下在医院的祥太逃跑，还是没有成功。</p><p>”你们并不是一家人啊。“</p><p>”奶奶的尸体呢？抛尸可是犯罪啊。“</p><p>”为什么要诱拐孩子呢？“</p><p>”柴田你啊，祥太是你的本名把？“</p><p>”叫孩子偷窃，内心不会愧疚吗？“</p><p>”听说那两个人是杀了前夫呢。“</p><p>”奶奶一直有从你父母那里拿钱哦。“</p><p>”是因为自己生不出孩子，才嫉妒别人，才会诱拐孩子的吧。”</p><p>”树理（由理）的画颜色真好看呀，终于能回家了呢。“</p><p>“祥太你呀，以后就能去学校上学啦。”</p><p>”他们是怎么称呼你的呢？妈妈？母亲？“</p><p>……</p><p>解散了，这样的羁绊。</p><p>道德的制高点，大概看不见渺小的尘埃。</p><p>总会有些疑惑，比如为什么信代失业，柴田却理所当然的说你可以重拾老本行；奶奶死的时候，信代和柴田没有一点难过的样子，没过多久就拿了奶奶的养老金窃喜；为什么明明从前给了祥太这般的慈爱和体贴，却还是决定抛弃他，偷偷溜走。</p><p>柴田追赶着公交车，大声呼喊祥太的名字，车上的祥太却只是向前看，无动于衷。但是末了却转过头，轻声的说了一声”爸爸“。祥太对柴田的爱的认可，是真的，希望自己能够追寻另一种人生，也是真的。</p><p>只是柴田永远听不见这句”爸爸“，就像奶奶在海边说的”谢谢“，就像亚纪一直在从父母那里拿钱的时候，以为奶奶并不是喜欢她，才收留她的，是因为钱，她永远不知道奶奶一分钱没花。我想起她问柴田，维系两个人之间的东西到底是什么？是钱啊。</p><p>是利益吗？让这个家庭组合在一起？</p><p>我想是的，私利是让他们走在一起的原因，是让他们一起生活的原因，是让他们选择彼此的原因。这并不影响我对你的关心。只是这样的选择，比起自己原本的人生，好了太多了。</p><p>私欲是真的，背叛是真的，爱也是真的。</p><p>无法讨论人性，因为无情之中又饱含着万千真情。</p><p>世界并不是完美的乌托邦，也并非地狱的修罗场。</p><p>每个人都有每个人的活法。</p><p>也许我根本没有看懂这部电影，很多人都说看不懂。只是很喜欢这样的电影。我想起自己看《人间失格》电影的时候，开头，一条弹幕：</p><p>”你不需要看懂这部电影，你只要知道，有人这样活着就好了。“</p><blockquote><p>他呈现的不是道德的是非，而是道德的困境。</p><p>他帮你撕掉人们身上的标签，让你看见那一个一个人。那些和你一样，有血有肉，有夜里开着灯等他们回家的亲人。</p><p>他尽力展现生活的复杂，让你看到算计，也看到算计背后的温情，让你了解，体谅，让你珍惜”有点肮脏的世界，忽然变得美好了起来的瞬间。“</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;img src=&quot;https://xheartbeat.top/mdpicture/海边.jpg&quot; alt=&quot;海边&quot;&gt;

&lt;p&gt;我发现日本的电影或者是电视剧，总是生活的样子，不会
      
    
    </summary>
    
      <category term="Life &amp; Story" scheme="http://github.com/xxq1999/categories/Life-Story/"/>
    
    
      <category term="随想" scheme="http://github.com/xxq1999/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>整数划分(裸五边形定理)</title>
    <link href="http://github.com/xxq1999/2018/08/17/%E6%95%B4%E6%95%B0%E5%88%92%E5%88%86(%E8%A3%B8%E4%BA%94%E8%BE%B9%E5%BD%A2%E5%AE%9A%E7%90%86)/"/>
    <id>http://github.com/xxq1999/2018/08/17/整数划分(裸五边形定理)/</id>
    <published>2018-08-16T16:01:00.000Z</published>
    <updated>2020-09-18T06:20:47.031Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="不可重复的数字划分（基础dp）"><a href="#不可重复的数字划分（基础dp）" class="headerlink" title="不可重复的数字划分（基础dp）"></a><a href="https://www.51nod.com/onlineJudge/questionCode.html#!problemId=1201">不可重复的数字划分</a>（基础dp）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">50005</span>;</span><br><span class="line"><span class="keyword">const</span> LL MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> dp[MAXN][<span class="number">350</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//  int n,m,cas=1;</span></span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">   <span class="comment">// five();</span></span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j*(j+<span class="number">1</span>)&lt;=i*<span class="number">2</span>;j++)</span><br><span class="line">            dp[i][j]=(dp[i-j][j<span class="number">-1</span>]+dp[i-j][j])%MOD;</span><br><span class="line">            <span class="comment">//1.i-j的数，j-1个划分，每个划分数+1，再加上1的划分；2.i-j的数。j个划分，每个划分数+1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">350</span>&amp;&amp;dp[n][i]!=<span class="number">0</span>;i++)</span><br><span class="line">            ans=(ans+dp[n][i])%MOD;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1259-整数划分-V2"><a href="#1259-整数划分-V2" class="headerlink" title="1259 整数划分 V2"></a><a href="https://www.51nod.com/onlineJudge/questionCode.html#!problemId=1259">1259 整数划分 V2</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可重复的划分，五边形定理</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> LL INF = <span class="number">1e9</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">50005</span>;</span><br><span class="line"><span class="keyword">const</span> LL MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> q[<span class="number">405</span>],f[MAXN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">five</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">400</span>;i+=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        LL temp=(i+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        q[i]=(<span class="number">3</span>*temp*temp-temp)/<span class="number">2</span>;</span><br><span class="line">        q[i+<span class="number">1</span>]=(<span class="number">3</span>*temp*temp+temp)/<span class="number">2</span>;</span><br><span class="line">       <span class="comment">// printf(&quot;%lld,&quot;,q[i]);</span></span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=MAXN;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>,c=<span class="number">1</span>;j&lt;=<span class="number">400</span>;j+=<span class="number">2</span>,c*=<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i-q[j]&lt;<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            f[i]=(f[i]+f[i-q[j]]*c+MOD)%MOD;</span><br><span class="line">            <span class="keyword">if</span>(i-q[j+<span class="number">1</span>]&lt;<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            f[i]=(f[i]+f[i-q[j+<span class="number">1</span>]]*c+MOD)%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,cas=<span class="number">1</span>;</span><br><span class="line">    LL a;</span><br><span class="line">    five();</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,f[n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;不可重复的数字划分（基础dp）&quot;&gt;&lt;a href=&quot;#不可重复的数字划分（基础dp）&quot; class=&quot;headerlink&quot; title=&quot;不可重复的数字划分（基础
      
    
    </summary>
    
      <category term="算法" scheme="http://github.com/xxq1999/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数学" scheme="http://github.com/xxq1999/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Little Bishops（棋盘禁区排列）</title>
    <link href="http://github.com/xxq1999/2018/08/17/Little-Bishops%EF%BC%88%E6%A3%8B%E7%9B%98%E7%A6%81%E5%8C%BA%E6%8E%92%E5%88%97%EF%BC%89/"/>
    <id>http://github.com/xxq1999/2018/08/17/Little-Bishops（棋盘禁区排列）/</id>
    <published>2018-08-16T16:00:00.000Z</published>
    <updated>2020-09-16T04:54:59.437Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1>[Little Bishops](https://vjudge.net/problem/UVA-861)</h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>在国际棋盘中，象的走法是斜对角线，也就是说两个象不能容于一条斜对角线。国际象棋有黑白两色格子相交组成。给你n*n的棋盘和k个象，问你在满足任意两个象互不相斥的情况下，摆放的最大种数？</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>利用棋盘禁区排列这一思想。</p><p>首先我们可以看到，在棋盘中，黑色的格子和白色的格子上的象绝对不会相斥，所以我们可以根据$R_k(C)=R_i(C_1)*R_{k-i}(C-C_1)$得，Ans就是在黑色棋盘上放i个象的种类乘以在白色棋盘上放k-i个象的种数。</p><p>为了将黑白棋盘分开，比如要建立一个方便的白色棋盘，斜着看显然不舒服，那么我们就：</p><p>先把黑色格子删去，然后我们斜+45度看这个棋盘，把一斜看做一行，一斜中的格子数就是一行的格子数，同样的，斜-45度就是列中的格子数。又因为每行互换位置并不影响最终结果，因此我们可以把原本对称的棋盘行，进行格数从小到大排序，得到最终的棋盘。</p><p>注意，由于黑白棋盘不一样，对于一个n*n的棋盘来说，斜+45度看一共有2n-1个斜行，因此我们这里让白色棋盘占n行，黑色占n-1行，然后用另外的一个数组来存每行中有多少格子（列），基本的构造棋盘就完成了。</p><p>对于构造出来的棋盘（如白色），分析一下：</p><p>设mp[i][j]表示前i行放j个棋子的种数。那么有<br>$$<br>mp[i][j]=mp[i-1][j]+mp[i-1][j-1]·(c[i]-(j-1))<br>$$<br>相当于=前i-1行放了j个棋子，这一行不放的种数，加上前i-1行放了j-1个棋子乘以这一行只能在（格子数-已经被j-1个象占了的格子数量）个格子。</p><p>对两个棋盘都进行这样的操作即可。</p><p>最后的答案就是$\sum_{i=0}^{k}R_i(C_{white})·R_{k-i}(C_{black})$</p><h2 id="看！代码"><a href="#看！代码" class="headerlink" title="看！代码"></a>看！代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> mp1[<span class="number">10</span>][<span class="number">70</span>],mp2[<span class="number">10</span>][<span class="number">70</span>];</span><br><span class="line"><span class="keyword">int</span> c1[<span class="number">10</span>],c2[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>&amp;&amp;k==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(k==<span class="number">1</span>||k==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(mp1,<span class="number">0</span>,<span class="keyword">sizeof</span>(mp1));</span><br><span class="line">        <span class="built_in">memset</span>(mp2,<span class="number">0</span>,<span class="keyword">sizeof</span>(mp2));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="comment">//白色棋盘</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&amp;<span class="number">1</span>) c1[i]=i;</span><br><span class="line">            <span class="keyword">else</span> c1[i]=c1[i<span class="number">-1</span>]; <span class="comment">//printf(&quot;i:%d\n&quot;,c1[i]);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++) <span class="comment">//黑色棋盘</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&amp;<span class="number">1</span>) c2[i]=i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> c2[i]=i;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">            mp1[i][<span class="number">0</span>]=mp2[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++)</span><br><span class="line">            mp1[i][j]=mp1[i<span class="number">-1</span>][j]+mp1[i<span class="number">-1</span>][j<span class="number">-1</span>]*(c1[i]-j+<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++)</span><br><span class="line">            mp2[i][j]=mp2[i<span class="number">-1</span>][j]+mp2[i<span class="number">-1</span>][j<span class="number">-1</span>]*(c2[i]-j+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k;i++)</span><br><span class="line">            ans+=<span class="number">1l</span>l*mp1[n][i]*mp2[n<span class="number">-1</span>][k-i];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1&gt;[Little Bishops](https://vjudge.net/problem/UVA-861)&lt;/h1&gt;

&lt;h2 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; c
      
    
    </summary>
    
      <category term="算法" scheme="http://github.com/xxq1999/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="排列组合" scheme="http://github.com/xxq1999/tags/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>Werewolf（缩点）</title>
    <link href="http://github.com/xxq1999/2018/08/16/Werewolf/"/>
    <id>http://github.com/xxq1999/2018/08/16/Werewolf/</id>
    <published>2018-08-16T15:17:00.000Z</published>
    <updated>2020-09-16T04:54:34.932Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="Werewolf"><a href="#Werewolf" class="headerlink" title="Werewolf"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6370">Werewolf</a></h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>狼人杀游戏，规定村民不能说假话，狼人可能说假话。</p><p>每一个人可以指认别人（除了自己）是村民或者是狼人。</p><p>根据这些指证，我们可以得出：</p><p>1、x号必为村民；</p><p>2、x号必为狼人；</p><p>3、x号可能是村民也可能是狼人。</p><p>问必为村民的人数和必为狼人的人数。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>题解的代码比较妙啊……</p><p>首先我们肯定能分析出不可能有必为村民的情况，因为所有人都可能是狼人这样的情况是成立的。</p><p>然后，我们又能发现，只有在环中，只存在一个狼人指证，和至少1个村民指证，那么才能确认其中的某一个人是狼人；</p><p>我们再通过这些确认的狼人，推出其他指证这些狼人为平民的人必为狼人。</p><h2 id="看！代码"><a href="#看！代码" class="headerlink" title="看！代码"></a>看！代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">&#125;g[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> vis[N];</span><br><span class="line"><span class="keyword">int</span> ans[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis[id]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(g[id].v==<span class="number">1</span>) <span class="comment">//我指证别人是村民</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[g[id].to]) <span class="comment">//指证的人没有被访问过，就要先让他过一下</span></span><br><span class="line">        &#123;</span><br><span class="line">            solve(g[id].to);</span><br><span class="line">            <span class="keyword">if</span>(ans[g[id].to]==<span class="number">-1</span>) ans[id]=<span class="number">-1</span>; <span class="comment">//我指证的是铁狼，那么我说了谎，我也是狼</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(ans[g[id].to]==id) ans[id]=<span class="number">-1</span>; <span class="comment">//我指证的人指证回了我，说明有个环，环中有一个狼人指证，那么我就是那个铁狼。</span></span><br><span class="line">            <span class="keyword">else</span> ans[id]=ans[g[id].to]; <span class="comment">//我也指向我指证的人的指证</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ans[g[id].to]==<span class="number">0</span>) ans[id]=N; <span class="comment">//如果有全为村民的环，这里体现为，我最终指证回了一开始的那个人，结果呢，他居然还是没有得到指证的指证的指证……的对象，说明不能确认他，也就是说是全村民环。</span></span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//访问过啦，但是也不是全是村民</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans[id]=ans[g[id].to]; <span class="comment">//我继续指证</span></span><br><span class="line">            <span class="keyword">if</span>(ans[id]==id) ans[id]=<span class="number">-1</span>; <span class="comment">//如果……</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//我指证别人是狼！但是啥都不一定，所以我指证指证。(- -|||)天呐我在说什么。。。</span></span><br><span class="line">        ans[id]=g[id].to; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t,n,x;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">20</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="keyword">sizeof</span>(ans));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;g[i].to);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">            <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">&#x27;w&#x27;</span>) g[i].v=<span class="number">0</span>;<span class="comment">//狼人</span></span><br><span class="line">            <span class="keyword">else</span> g[i].v=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span>(ans[i]==<span class="number">0</span>)</span><br><span class="line">                solve(i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span>(ans[i]==<span class="number">-1</span>)cnt++;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0 %d\n&quot;</span>,cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;Werewolf&quot;&gt;&lt;a href=&quot;#Werewolf&quot; class=&quot;headerlink&quot; title=&quot;Werewolf&quot;&gt;&lt;/a&gt;&lt;a href=&quot;htt
      
    
    </summary>
    
      <category term="算法" scheme="http://github.com/xxq1999/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Prefix Free Code（字符串）</title>
    <link href="http://github.com/xxq1999/2018/08/16/Prefix-Free-Code/"/>
    <id>http://github.com/xxq1999/2018/08/16/Prefix-Free-Code/</id>
    <published>2018-08-16T15:16:00.000Z</published>
    <updated>2020-09-16T04:54:19.884Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>## <a href="https://nanti.jisuanke.com/t/29556">Prefix Free Code</a> </p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给你n个字符串，这些字符串都不是互相的前缀，再给你一个模式串。模式串由k个其中的字符串任意排列组成。求这个模式串是从中选k个按照字典序排列组成的第几个串？</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>用全排列的方法，1~n表示前n个字符串，用字符串哈希的方法把他们压缩成数字放在map里映射字符串的序号。</p><p>然后遍历模式串。对于每找到一个字符串，按照（比此序号小的字符串-前面已经用掉的字符串的个数）*剩下的位子的全排列数量乘以原先算出来的种数，然后把这个新找到的字符串add到树状数组中，用来标记已经用掉的字符串的个数。</p><h2 id="看！代码"><a href="#看！代码" class="headerlink" title="看！代码"></a>看！代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1000010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll fac[<span class="number">1000010</span>];</span><br><span class="line">ll inv[<span class="number">1000010</span>];</span><br><span class="line"><span class="built_in">string</span> s[<span class="number">1000010</span>];</span><br><span class="line"><span class="built_in">string</span> ss;</span><br><span class="line"><span class="keyword">const</span> ll base=<span class="number">131</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1234567891011l</span>l;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;ll,<span class="keyword">int</span>&gt;mp;</span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len=s[id].size();</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        ans=(ans*base+(s[id][i]))%mod;</span><br><span class="line">    <span class="keyword">return</span> ans;<span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">1000010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)</span><br><span class="line">    &#123;</span><br><span class="line">        res+=d[x];</span><br><span class="line">        x-=lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x&lt;=n)</span><br><span class="line">    &#123;</span><br><span class="line">        d[x]+=v;</span><br><span class="line">        x+=lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">PowerMod</span><span class="params">(ll a,ll b,ll c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans=<span class="number">1</span>;</span><br><span class="line">    ll k;</span><br><span class="line">    k=a;</span><br><span class="line">    k=k%c;</span><br><span class="line">    <span class="keyword">while</span>(b&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)</span><br><span class="line">            ans=(ans*k)%c;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        k=(k*k)%c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>]=fac[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=MAXN;i++)</span><br><span class="line">        fac[i]=fac[i<span class="number">-1</span>]*i%MOD;</span><br><span class="line">    inv[MAXN]=PowerMod(fac[MAXN],MOD<span class="number">-2</span>,MOD);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=MAXN<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        inv[i]=inv[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s[i];</span><br><span class="line">    sort(s+<span class="number">1</span>,s+n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ll tot=solve(i);</span><br><span class="line">        mp[tot]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;ss;</span><br><span class="line">    <span class="keyword">int</span> len=ss.size();</span><br><span class="line">    ll temp=<span class="number">0</span>;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp=(temp*base+(ss[i]))%mod;</span><br><span class="line">        <span class="keyword">if</span>(mp[temp]!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">int</span> id=mp[temp];</span><br><span class="line">            ll sum=<span class="number">1</span>;</span><br><span class="line">            sum=id<span class="number">-1</span>-query(id);</span><br><span class="line">            sum=((fac[n-cnt]*inv[n-k])%MOD*sum)%MOD;</span><br><span class="line">            ans=(ans+sum)%MOD;</span><br><span class="line">            temp=<span class="number">0</span>;</span><br><span class="line">            add(id,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,(ans+<span class="number">1</span>)%MOD);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;## &lt;a href=&quot;https://nanti.jisuanke.com/t/29556&quot;&gt;Prefix Free Code&lt;/a&gt; &lt;/p&gt;
&lt;h2 id=&quot;题意&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="算法" scheme="http://github.com/xxq1999/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="全排列构造" scheme="http://github.com/xxq1999/tags/%E5%85%A8%E6%8E%92%E5%88%97%E6%9E%84%E9%80%A0/"/>
    
      <category term="字符串哈希" scheme="http://github.com/xxq1999/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/"/>
    
  </entry>
  
</feed>
